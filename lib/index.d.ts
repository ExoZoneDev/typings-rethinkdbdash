export function table(name: string): Term;
export interface Term {
  run(connection?: any, options?: any, callback?: (err, res) => void);
  table(name: string, options?: any): Term;
  toStream(connection: any, options: any): NodeJS.ReadableStream;
  dbCreate(db: string): Term;
  dbDrop(db: string): Term;
  dbList(): Term;
  tableCreate(table: string, options: any): Term;
  tableDrop(table: string): Term;
  tableList(): Term;
  indexList(): Term;
  indexCreate(name: string, fn: () => void, options: any): Term;
  indexDrop(name: string): Term;
  indexStatus(): Term;
  indexWait(): Term;
  indexRename(oldName: string, newName: string, options: any): Term;
  changes(options?: any): Term;
  insert(documents: any, options?: any): Term;
  update(newValue: any, options?: any): Term;
  replace(newValue: any, options?: any): Term;
  delete(options: any): Term;
  sync(): Term;
  table(table: string, options: any): Term;
  get(key: string): Term;
  getAll(): Term;
  between(start: any, end: any, options?: any): Term;
  minval(): Term;
  maxval(): Term;
  filter(filter: any, options?: any): Term;
  innerJoin(sequence: any, predicate: any): Term;
  innerJoin(sequence: any, predicate: any): Term;
  eqJoin(rightKey: any, sequence: any, options?: any): Term;
  zip(): Term;
  map(): Term;
  withFields(): Term;
  concatMap(transformation: any): Term;
  orderBy(): Term;
  desc(field: string): Term;
  asc(field: string): Term;
  skip(value: any): Term;
  limit(value: any): Term;
  slice(start: number, end: number, options?: any): Term;
  nth(element: number): Term;
  sample(size: number): Term;
  pluck(selection: string[]): Term;
  now(): Term;
  then<U>(onFulfill: (value: any) => U | PromiseLike<U>, onReject?: (error: any) => U | PromiseLike<U>, onProgress?: (note: any) => any): Promise<U>;
  row(field: string): Term;
  add(value: number): Term;
}
